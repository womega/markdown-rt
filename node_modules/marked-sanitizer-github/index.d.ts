export declare class SanitizeWhitelist {
    ELEMENTS: Set<string>;
    REMOVE_CONTENTS: string[];
    ATTRIBUTES: {
        a: string[];
        img: string[];
        div: string[];
        blockquote: string[];
        del: string[];
        ins: string[];
        q: string[];
        '*': Set<string>;
    };
    PROTOCOLS: {
        [name: string]: {
            [attr: string]: string[];
        };
    };
}
export declare class SanitizeConfig {
    LIST: string[];
    LIST_ITEM: string;
    TABLE_ITEMS: string[];
    TABLE: string;
    TABLE_SECTIONS: string[];
    whitelist: SanitizeWhitelist;
}
export default class SanitizeState {
    config: SanitizeConfig;
    onDetectedBroken: ((message: string, tag: string) => void) | null;
    private broken;
    private tagStack;
    private parsed;
    private readonly parser;
    reset(): void;
    isInUse(): boolean;
    isBroken(): boolean;
    getSanitizer(): any;
    sanitize(tag: string): string;
    private itsBroken(msg, tag);
    private sanitizeCloseTag(tag);
    private sanitizeOpenTag(tag);
    private parseOpenTag(tag);
    private howToSanitize(elem);
}
